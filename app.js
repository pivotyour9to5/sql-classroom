const statusEl=document.getElementById('status');function setStatus(m){if(statusEl)statusEl.textContent=m}function clearStatus(){if(statusEl)statusEl.textContent=''}const editor=CodeMirror.fromTextArea(document.getElementById('sqlInput'),{mode:'text/x-sql',lineNumbers:true,autofocus:true,indentWithTabs:false,smartIndent:true,matchBrackets:true});const SEED_SQL="DROP TABLE IF EXISTS contractors; DROP TABLE IF EXISTS projects; DROP TABLE IF EXISTS jobs;\nCREATE TABLE contractors(contractor_id INTEGER PRIMARY KEY, name TEXT, trade TEXT, city TEXT, hourly_rate REAL);\nINSERT INTO contractors VALUES (1, 'Charlie Nguyen', 'Drywaller', 'Toronto', 73.56);\nINSERT INTO contractors VALUES (2, 'Drew Carter', 'Drywaller', 'Vancouver', 87.32);\nINSERT INTO contractors VALUES (3, 'Reese Lopez', 'Carpenter', 'Calgary', 57.42);\nINSERT INTO contractors VALUES (4, 'Hayden Bennett', 'Carpenter', 'Vancouver', 83.24);\nINSERT INTO contractors VALUES (5, 'Quinn Martinez', 'Electrician', 'Vancouver', 116.41);\nINSERT INTO contractors VALUES (6, 'Jordan Bennett', 'Electrician', 'Toronto', 93.45);\nINSERT INTO contractors VALUES (7, 'Sydney Brooks', 'Plumber', 'Calgary', 102.03);\nINSERT INTO contractors VALUES (8, 'Jordan Singh', 'Electrician', 'Calgary', 65.84);\nINSERT INTO contractors VALUES (9, 'Parker Hughes', 'Electrician', 'Calgary', 90.15);\nINSERT INTO contractors VALUES (10, 'Quinn Brooks', 'Plumber', 'Vancouver', 98.26);\nINSERT INTO contractors VALUES (11, 'Reese Gibson', 'Electrician', 'Toronto', 109.15);\nINSERT INTO contractors VALUES (12, 'Quinn Bennett', 'Electrician', 'Vancouver', 80.28);\nINSERT INTO contractors VALUES (13, 'Jordan Reid', 'Electrician', 'Toronto', 101.27);\nINSERT INTO contractors VALUES (14, 'Rowan Hughes', 'Plumber', 'Toronto', 44.68);\nINSERT INTO contractors VALUES (15, 'Morgan Grewal', 'Drywaller', 'Vancouver', 116.8);\nINSERT INTO contractors VALUES (16, 'Logan Singh', 'Drywaller', 'Calgary', 118.4);\nINSERT INTO contractors VALUES (17, 'Logan Nguyen', 'Carpenter', 'Vancouver', 78.45);\nINSERT INTO contractors VALUES (18, 'Sydney Bennett', 'Drywaller', 'Vancouver', 66.07);\nINSERT INTO contractors VALUES (19, 'Jordan Gibson', 'Electrician', 'Toronto', 86.73);\nINSERT INTO contractors VALUES (20, 'Hayden Brooks', 'Carpenter', 'Toronto', 55.66);\nCREATE TABLE projects(project_id INTEGER PRIMARY KEY, project_name TEXT, project_type TEXT, city TEXT);\nINSERT INTO projects VALUES (1, 'Townhouse Vancouver #001', 'Townhouse', 'Vancouver');\nINSERT INTO projects VALUES (2, 'Condo Calgary #002', 'Condo', 'Calgary');\nINSERT INTO projects VALUES (3, 'Semi Detached Calgary #003', 'Semi Detached', 'Calgary');\nINSERT INTO projects VALUES (4, 'Condo Calgary #004', 'Condo', 'Calgary');\nINSERT INTO projects VALUES (5, 'Condo Toronto #005', 'Condo', 'Toronto');\nINSERT INTO projects VALUES (6, 'Basement Vancouver #006', 'Basement', 'Vancouver');\nINSERT INTO projects VALUES (7, 'Basement Vancouver #007', 'Basement', 'Vancouver');\nINSERT INTO projects VALUES (8, 'Detached House Vancouver #008', 'Detached House', 'Vancouver');\nINSERT INTO projects VALUES (9, 'Semi Detached Calgary #009', 'Semi Detached', 'Calgary');\nINSERT INTO projects VALUES (10, 'Detached House Vancouver #010', 'Detached House', 'Vancouver');\nINSERT INTO projects VALUES (11, 'Detached House Vancouver #011', 'Detached House', 'Vancouver');\nINSERT INTO projects VALUES (12, 'Detached House Vancouver #012', 'Detached House', 'Vancouver');\nCREATE TABLE jobs(job_id INTEGER PRIMARY KEY, contractor_id INTEGER, project_id INTEGER, hours_worked INTEGER, job_date TEXT);\nINSERT INTO jobs VALUES (1, 2, 3, 15, '2025-07-04');\nINSERT INTO jobs VALUES (2, 17, 8, 16, '2025-07-10');\nINSERT INTO jobs VALUES (3, 16, 9, 33, '2025-06-12');\nINSERT INTO jobs VALUES (4, 19, 1, 8, '2025-04-23');\nINSERT INTO jobs VALUES (5, 5, 9, 25, '2025-06-21');\nINSERT INTO jobs VALUES (6, 2, 10, 19, '2025-07-01');\nINSERT INTO jobs VALUES (7, 2, 7, 11, '2025-04-03');\nINSERT INTO jobs VALUES (8, 3, 5, 7, '2025-07-22');\nINSERT INTO jobs VALUES (9, 18, 5, 19, '2025-06-18');\nINSERT INTO jobs VALUES (10, 18, 3, 39, '2025-06-14');\nINSERT INTO jobs VALUES (11, 9, 10, 40, '2025-04-11');\nINSERT INTO jobs VALUES (12, 19, 8, 25, '2025-06-11');\nINSERT INTO jobs VALUES (13, 2, 2, 30, '2025-05-24');\nINSERT INTO jobs VALUES (14, 12, 5, 40, '2025-07-18');\nINSERT INTO jobs VALUES (15, 16, 10, 12, '2025-04-09');\nINSERT INTO jobs VALUES (16, 17, 2, 33, '2025-06-23');\nINSERT INTO jobs VALUES (17, 15, 1, 31, '2025-07-13');\nINSERT INTO jobs VALUES (18, 19, 9, 8, '2025-07-10');\nINSERT INTO jobs VALUES (19, 10, 12, 35, '2025-06-04');\nINSERT INTO jobs VALUES (20, 4, 4, 26, '2025-07-11');\nINSERT INTO jobs VALUES (21, 11, 3, 33, '2025-04-03');\nINSERT INTO jobs VALUES (22, 19, 2, 33, '2025-07-30');\nINSERT INTO jobs VALUES (23, 15, 5, 38, '2025-06-27');\nINSERT INTO jobs VALUES (24, 1, 9, 16, '2025-07-15');\nINSERT INTO jobs VALUES (25, 10, 1, 20, '2025-06-09');\nINSERT INTO jobs VALUES (26, 16, 7, 8, '2025-07-02');\nINSERT INTO jobs VALUES (27, 4, 9, 34, '2025-06-08');\nINSERT INTO jobs VALUES (28, 12, 10, 23, '2025-05-23');\nINSERT INTO jobs VALUES (29, 7, 12, 9, '2025-07-30');\nINSERT INTO jobs VALUES (30, 4, 9, 23, '2025-05-22');\nINSERT INTO jobs VALUES (31, 11, 9, 27, '2025-07-18');\nINSERT INTO jobs VALUES (32, 4, 2, 31, '2025-05-17');\nINSERT INTO jobs VALUES (33, 2, 6, 7, '2025-07-28');\nINSERT INTO jobs VALUES (34, 13, 11, 21, '2025-05-03');\nINSERT INTO jobs VALUES (35, 7, 5, 17, '2025-05-30');\nINSERT INTO jobs VALUES (36, 10, 8, 32, '2025-05-11');\nINSERT INTO jobs VALUES (37, 2, 3, 34, '2025-04-01');\nINSERT INTO jobs VALUES (38, 1, 7, 33, '2025-06-06');\nINSERT INTO jobs VALUES (39, 15, 10, 20, '2025-05-08');\nINSERT INTO jobs VALUES (40, 4, 5, 11, '2025-07-29');\nINSERT INTO jobs VALUES (41, 6, 7, 25, '2025-06-03');\nINSERT INTO jobs VALUES (42, 14, 4, 36, '2025-06-12');\nINSERT INTO jobs VALUES (43, 17, 5, 24, '2025-06-11');\nINSERT INTO jobs VALUES (44, 1, 10, 28, '2025-07-19');\nINSERT INTO jobs VALUES (45, 20, 10, 33, '2025-06-18');\nINSERT INTO jobs VALUES (46, 18, 3, 28, '2025-07-14');\nINSERT INTO jobs VALUES (47, 2, 3, 15, '2025-06-19');\nINSERT INTO jobs VALUES (48, 3, 8, 30, '2025-04-08');\nINSERT INTO jobs VALUES (49, 8, 8, 15, '2025-07-29');\nINSERT INTO jobs VALUES (50, 20, 7, 4, '2025-06-19');";const LESSONS={"blank": {"starterSQL": "-- Type your query here"}, "select_from_where": {"starterSQL": "SELECT name, trade, city FROM contractors WHERE city = 'Calgary' AND trade = 'Plumber';"}, "and": {"starterSQL": "SELECT * FROM contractors WHERE trade='Electrician' AND hourly_rate >= 80;"}, "or": {"starterSQL": "SELECT name, city FROM contractors WHERE city='Calgary' OR city='Toronto';"}, "order_by": {"starterSQL": "SELECT name, trade, hourly_rate FROM contractors ORDER BY hourly_rate DESC, name ASC;"}, "distinct": {"starterSQL": "SELECT DISTINCT trade FROM contractors ORDER BY trade;"}, "limit": {"starterSQL": "SELECT name, hourly_rate FROM contractors ORDER BY hourly_rate DESC LIMIT 5;"}, "concat": {"starterSQL": "SELECT name || ' (' || trade || ')' AS label, city FROM contractors LIMIT 10;"}, "substring": {"starterSQL": "SELECT name, substr(name,1,5) AS first5 FROM contractors LIMIT 10;"}, "left": {"starterSQL": "SELECT name, substr(name,1,2) AS left2 FROM contractors LIMIT 10;"}, "right": {"starterSQL": "SELECT name, substr(name,-3) AS right3 FROM contractors LIMIT 10;"}, "like": {"starterSQL": "SELECT * FROM contractors WHERE name LIKE 'A%';"}, "in": {"starterSQL": "SELECT name, trade FROM contractors WHERE trade IN ('Plumber','Carpenter') ORDER BY trade, name;"}, "aggregates": {"starterSQL": "SELECT COUNT(*) AS n_contractors, MIN(hourly_rate) AS min_rate, MAX(hourly_rate) AS max_rate, ROUND(AVG(hourly_rate),2) AS avg_rate FROM contractors;"}, "group_by": {"starterSQL": "SELECT city, trade, COUNT(*) AS n, ROUND(AVG(hourly_rate),2) AS avg_rate FROM contractors GROUP BY city, trade ORDER BY city, avg_rate DESC;"}, "having": {"starterSQL": "SELECT trade, COUNT(*) AS n, ROUND(AVG(hourly_rate),2) AS avg_rate FROM contractors GROUP BY trade HAVING AVG(hourly_rate) > 80 ORDER BY avg_rate DESC;"}, "join": {"starterSQL": "-- INNER JOIN: contractors with logged jobs\nSELECT c.name, c.trade, p.project_name, p.project_type, j.hours_worked, j.job_date\nFROM jobs j\nJOIN contractors c ON c.contractor_id = j.contractor_id\nJOIN projects p ON p.project_id = j.project_id\nORDER BY j.job_date DESC, j.hours_worked DESC\nLIMIT 10;\n\n-- LEFT JOIN: all contractors even if no jobs yet\n-- SELECT c.name, p.project_name, j.hours_worked, j.job_date\n-- FROM contractors c\n-- LEFT JOIN jobs j ON j.contractor_id = c.contractor_id\n-- LEFT JOIN projects p ON p.project_id = j.project_id;\n\n-- RIGHT JOIN (simulate): swap tables + LEFT JOIN\n-- SELECT c.name, p.project_name, j.hours_worked, j.job_date\n-- FROM jobs j\n-- LEFT JOIN contractors c ON c.contractor_id = j.contractor_id\n-- LEFT JOIN projects p ON p.project_id = j.project_id;\n\n-- FULL OUTER (simulate): union of both directions\n-- SELECT c.name, p.project_name, j.hours_worked, j.job_date\n-- FROM contractors c\n-- LEFT JOIN jobs j ON j.contractor_id = c.contractor_id\n-- LEFT JOIN projects p ON p.project_id = j.project_id\n-- UNION\n-- SELECT c.name, p.project_name, j.hours_worked, j.job_date\n-- FROM jobs j\n-- LEFT JOIN contractors c ON c.contractor_id = j.contractor_id\n-- LEFT JOIN projects p ON p.project_id = j.project_id;"}, "union": {"starterSQL": "SELECT name, city FROM contractors WHERE city='Calgary' UNION ALL SELECT name, city FROM contractors WHERE city='Toronto';"}, "any": {"starterSQL": "SELECT name, hourly_rate FROM contractors WHERE hourly_rate >= ANY (SELECT hourly_rate FROM contractors WHERE city='Vancouver');"}, "all": {"starterSQL": "SELECT name, hourly_rate FROM contractors WHERE hourly_rate >= ALL (SELECT hourly_rate FROM contractors WHERE trade='Drywaller');"}, "if": {"starterSQL": "SELECT name, hourly_rate,\n  CASE\n    WHEN hourly_rate >= 100 THEN 'Premium'\n    WHEN hourly_rate >= 70 THEN 'Standard'\n    ELSE 'Budget'\n  END AS rate_band\nFROM contractors\nORDER BY hourly_rate DESC\nLIMIT 15;"}};function getLesson(){if(window.DEFAULT_LESSON&&LESSONS[window.DEFAULT_LESSON])return window.DEFAULT_LESSON;const p=new URLSearchParams(window.location.search);const l=p.get('lesson');if(l&&LESSONS[l])return l;return 'blank'}let db,SQL;async function init(){setStatus('Loading SQL engine…');SQL=await initSqlJs({locateFile:f=>`https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.10.2/${f}`});setStatus('Seeding database…');await resetDb(getLesson());setStatus('Ready');setTimeout(clearStatus,900);document.getElementById('runBtn').addEventListener('click',runQuery);document.getElementById('resetDbBtn').addEventListener('click',()=>resetDb(getLesson()));editor.on('keydown',(cm,e)=>{if(e.key==='Enter'&&e.shiftKey){e.preventDefault();runQuery();}})}async function resetDb(lessonKey){if(db){db.close();db=null}db=new SQL.Database();try{db.run(SEED_SQL)}catch(err){showError(err)}const lesson=LESSONS[lessonKey];editor.setValue(lesson.starterSQL||'-- Type your query here');renderResult([]);hideError()}function rowsToTable(columns,rows){const t=document.createElement('table');const thead=document.createElement('thead');const tr=document.createElement('tr');columns.forEach(c=>{const th=document.createElement('th');th.textContent=c;tr.appendChild(th)});thead.appendChild(tr);t.appendChild(thead);const tb=document.createElement('tbody');rows.forEach(r=>{const tr=document.createElement('tr');r.forEach(v=>{const td=document.createElement('td');td.textContent=v;tr.appendChild(td)});tb.appendChild(tr)});t.appendChild(tb);return t}function renderResult(results){const c=document.getElementById('results');c.innerHTML='';if(!results||results.length===0){c.innerHTML='<em>No results yet.</em>';return}results.forEach(res=>{c.appendChild(rowsToTable(res.columns||[],res.values||[]))})}function showError(err){const b=document.getElementById('errorBox');if(!b)return;b.hidden=false;b.textContent=err.message||String(err)}function hideError(){const b=document.getElementById('errorBox');if(!b)return;b.hidden=true;b.textContent=''}function runQuery(){hideError();try{const sql=editor.getValue();const results=db.exec(sql);renderResult(results)}catch(err){showError(err)}}init();